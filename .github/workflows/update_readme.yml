name: Update dynamic repo cards

on:
  push:
    branches: [ "main" ]
    paths:
      - README.md
      - .github/workflows/update_readme.yml
  schedule:
    - cron: "0 */12 * * *"   # every 12 hours
  workflow_dispatch:

permissions:
  contents: write

env:
  TARGET_USER: Khangnguyen01

jobs:
  refresh:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Create updater script
        run: |
          cat > updater.mjs << 'EOF'
          import fs from 'fs';
          import path from 'path';
          import {fileURLToPath} from 'url';

          const token = process.env.GITHUB_TOKEN;
          const username = process.env.TARGET_USER;

          const headers = {
            Authorization: `Bearer ${token}`,
            Accept: 'application/vnd.github+json',
            'X-GitHub-Api-Version': '2022-11-28'
          };

          async function getAllRepos(user) {
            let page = 1, results = [];
            while (true) {
              const url = `https://api.github.com/users/${user}/repos?per_page=100&sort=updated&page=${page}`;
              const res = await fetch(url, { headers });
              if (!res.ok) throw new Error(`GitHub API ${res.status}: ${await res.text()}`);
              const batch = await res.json();
              results = results.concat(batch);
              if (batch.length < 100) break;
              page++;
            }
            return results;
          }

          function cardHTML(username, repo) {
            return [
              `  <a href="${repo.html_url}">`,
              `    <img src="https://github-readme-stats.vercel.app/api/pin/?username=${username}&repo=${repo.name}&hide_border=true" alt="${repo.name}" />`,
              `  </a>`
            ].join('\n');
          }

          function makeBlock(username, repos) {
            const rows = [
              repos.slice(0, 2).map(r => cardHTML(username, r)).join('\n'),
              repos.slice(2, 4).map(r => cardHTML(username, r)).join('\n'),
              repos.slice(4, 6).map(r => cardHTML(username, r)).join('\n'),
            ];
            return `<!-- AUTO-CARDS:START -->
<p align="center">
${rows[0]}
</p>
<p align="center">
${rows[1]}
</p>
<p align="center">
${rows[2]}
</p>
<!-- AUTO-CARDS:END -->`;
          }

          async function main() {
            const repos = await getAllRepos(username);
            const filtered = repos
              .filter(r => !r.fork && !r.archived)
              .sort((a,b) => (b.stargazers_count - a.stargazers_count) || (new Date(b.pushed_at) - new Date(a.pushed_at)))
              .slice(0, 6);

            const readmePath = path.join(process.cwd(), 'README.md');
            const readme = fs.readFileSync(readmePath, 'utf8');

            const start = readme.indexOf('<!-- AUTO-CARDS:START -->');
            const end = readme.indexOf('<!-- AUTO-CARDS:END -->') + '<!-- AUTO-CARDS:END -->'.length;
            if (start === -1 || end === -1) throw new Error('AUTO-CARDS markers not found in README.md');

            const block = makeBlock(username, filtered);
            const updated = readme.slice(0, start) + block + readme.slice(end);
            fs.writeFileSync(readmePath, updated);
            console.log('README updated successfully.');
          }

          main().catch(err => {
            console.error(err);
            process.exit(1);
          });
          EOF

      - name: Run updater
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: node updater.mjs

      - name: Commit changes
        run: |
          git config user.name "Nguyen Khang Phuc (bot)"
          git config user.email "actions@users.noreply.github.com"
          git add README.md
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(readme): auto-update repo cards"
            git push
          fi
